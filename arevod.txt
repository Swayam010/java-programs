#include <stdio.h>
#define MAX 100

void storeEvenOdd(int *numArr, int arrLen);
int  ascendEvenOddPosn(int *numArr, int arrLen);
void sorting(int *numArr, int startPosn, int endPosn);

int main(void)
{
    int arrLen, i, numArr[MAX], oddPosn;

    printf("Array size(MAX 100): ");
    scanf("%d", &arrLen);

    printf("Elements: ");
    for(i = 0; i < arrLen; i++)
        scanf("%d", &numArr[i]);

    storeEvenOdd(numArr, arrLen);                   // Stores even number in first and odd number in second
    oddPosn = ascendEvenOddPosn(numArr, arrLen);    // Returs first odd number posn
    sorting(numArr, 0, oddPosn);                    // Sorts Even number
    sorting(numArr, oddPosn, arrLen);               // Sorts Odd number

    printf("After Elements: ");
    for(i = 0; i < arrLen; i++)
        printf("%d ", numArr[i]);

    printf("\n");

    return 0;
}

void storeEvenOdd(int *numArr, int arrLen)
{
    int i, j, temp;

    for(i = 0; i < arrLen; i++)
    {
        if(numArr[i] % 2 != 0)
        {
            for(j = i + 1; j < arrLen; j++)
            {
                if(numArr[j] % 2 == 0)
                {
                    temp = numArr[j];
                    numArr[j] = numArr[i];
                    numArr[i] = temp;
                    break;
                }
            }
        }
    }
}

int ascendEvenOddPosn(int *numArr, int arrLen)
{
    int i, oddPosn;

    for(i = 0; i < arrLen; i++)
    {
        if(numArr[i] % 2 != 0)
        {
            oddPosn = i;
            break;
        }
    }

    return oddPosn;
}

void sorting(int numArr[], int startPosn, int endPosn)
{
    int i, j, temp;

    for(i = startPosn + 1; i < endPosn; i++)
    {
        temp = numArr[i];

        for(j = i; j > startPosn && numArr[j - 1] > temp; j--)
            numArr[j] = numArr[j - 1];

        numArr[j] = temp;
    }
}
